$date
	Tue Aug 13 17:42:10 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Single_Cycle_Top_Tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module Single_Cycle_Top $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 # Zero $end
$var wire 32 $ SrcB [31:0] $end
$var wire 1 % ResultSrc $end
$var wire 32 & Result [31:0] $end
$var wire 1 ' RegWrite $end
$var wire 32 ( ReadData [31:0] $end
$var wire 32 ) RD_Instr [31:0] $end
$var wire 32 * RD2_Top [31:0] $end
$var wire 32 + RD1_Top [31:0] $end
$var wire 32 , PC_target_top [31:0] $end
$var wire 32 - PC_mux_out [31:0] $end
$var wire 32 . PC_Top [31:0] $end
$var wire 1 / PCSrc $end
$var wire 32 0 PCPlus4 [31:0] $end
$var wire 1 1 OverFlow $end
$var wire 1 2 Negative $end
$var wire 1 3 MemWrite $end
$var wire 32 4 Imm_Ext_Top [31:0] $end
$var wire 2 5 ImmSrc [1:0] $end
$var wire 1 6 Carry $end
$var wire 1 7 ALUSrc $end
$var wire 32 8 ALUResult [31:0] $end
$var wire 3 9 ALUControl_Top [2:0] $end
$scope module ALU $end
$var wire 1 6 Carry $end
$var wire 1 1 OverFlow $end
$var wire 1 # Zero $end
$var wire 32 : Sum [31:0] $end
$var wire 32 ; Result [31:0] $end
$var wire 1 2 Negative $end
$var wire 1 < Cout $end
$var wire 32 = B [31:0] $end
$var wire 3 > ALUControl [2:0] $end
$var wire 32 ? A [31:0] $end
$upscope $end
$scope module Control_Unit_Top $end
$var wire 7 @ Op [6:0] $end
$var wire 3 A funct3 [2:0] $end
$var wire 7 B funct7 [6:0] $end
$var wire 1 % ResultSrc $end
$var wire 1 ' RegWrite $end
$var wire 1 3 MemWrite $end
$var wire 2 C ImmSrc [1:0] $end
$var wire 1 / Branch $end
$var wire 1 7 ALUSrc $end
$var wire 2 D ALUOp [1:0] $end
$var wire 3 E ALUControl [2:0] $end
$scope module ALU_Decoder $end
$var wire 3 F funct3 [2:0] $end
$var wire 7 G funct7 [6:0] $end
$var wire 7 H op [6:0] $end
$var wire 2 I ALUOp [1:0] $end
$var wire 3 J ALUControl [2:0] $end
$upscope $end
$scope module Main_Decoder $end
$var wire 7 K Op [6:0] $end
$var wire 1 % ResultSrc $end
$var wire 1 ' RegWrite $end
$var wire 1 3 MemWrite $end
$var wire 2 L ImmSrc [1:0] $end
$var wire 1 / Branch $end
$var wire 1 7 ALUSrc $end
$var wire 2 M ALUOp [1:0] $end
$upscope $end
$upscope $end
$scope module Data_Memory $end
$var wire 32 N A [31:0] $end
$var wire 1 3 WE $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 O WD [31:0] $end
$var wire 32 P RD [31:0] $end
$upscope $end
$scope module Instruction_Memory $end
$var wire 1 " rst $end
$var wire 32 Q RD [31:0] $end
$var wire 32 R A [31:0] $end
$upscope $end
$scope module Mux_DataMemory_to_Register $end
$var wire 32 S a [31:0] $end
$var wire 32 T b [31:0] $end
$var wire 1 % s $end
$var wire 32 U c [31:0] $end
$upscope $end
$scope module Mux_Register_to_ALU $end
$var wire 1 7 s $end
$var wire 32 V c [31:0] $end
$var wire 32 W b [31:0] $end
$var wire 32 X a [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 Y PC_Next [31:0] $end
$var reg 32 Z PC [31:0] $end
$upscope $end
$scope module PC_Adder $end
$var wire 32 [ a [31:0] $end
$var wire 32 \ b [31:0] $end
$var wire 32 ] c [31:0] $end
$upscope $end
$scope module PC_target $end
$var wire 32 ^ a [31:0] $end
$var wire 32 _ c [31:0] $end
$var wire 32 ` b [31:0] $end
$upscope $end
$scope module PC_target_TO_PC_Next $end
$var wire 32 a a [31:0] $end
$var wire 32 b b [31:0] $end
$var wire 1 / s $end
$var wire 32 c c [31:0] $end
$upscope $end
$scope module Register_File $end
$var wire 5 d A1 [4:0] $end
$var wire 5 e A2 [4:0] $end
$var wire 5 f A3 [4:0] $end
$var wire 32 g WD3 [31:0] $end
$var wire 1 ' WE3 $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 h RD2 [31:0] $end
$var wire 32 i RD1 [31:0] $end
$upscope $end
$scope module Sign_Extend $end
$var wire 2 j ImmSrc [1:0] $end
$var wire 32 k In [31:0] $end
$var reg 32 l Imm_Ext [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
bx c
bx b
bx a
b0 `
bx _
bx ^
bx ]
b100 \
bx [
bx Z
bx Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
bx R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
0<
b0 ;
b0 :
b0 9
b0 8
07
06
b0 5
b0 4
03
02
01
bx 0
0/
bx .
bx -
bx ,
b0 +
b0 *
b0 )
b0 (
0'
b0 &
0%
b0 $
1#
0"
0!
$end
#50
b0 -
b0 Y
b0 c
b100 0
b100 ]
b100 b
b0 ,
b0 _
b0 a
b0 .
b0 R
b0 Z
b0 [
b0 ^
1!
#100
b1 9
b1 >
b1 E
b1 J
01
02
b0 &
b0 U
b0 g
1#
b10 5
b10 C
b10 L
b10 j
b1 D
b1 I
b1 M
b0 8
b0 ;
b0 N
b0 S
06
1/
b100 -
b100 Y
b100 c
b0 :
0<
b1100011 B
b1100011 G
b1100011 @
b1100011 H
b1100011 K
b10101 f
b100 e
b100 d
b11111111111111111111111111110100 ,
b11111111111111111111111111110100 _
b11111111111111111111111111110100 a
b11111111111111111111111111110100 4
b11111111111111111111111111110100 W
b11111111111111111111111111110100 `
b11111111111111111111111111110100 l
b100 $
b100 =
b100 V
bx (
bx P
bx T
b11111110010000100000101011100011 )
b11111110010000100000101011100011 Q
b11111110010000100000101011100011 k
b100 +
b100 ?
b100 i
b100 *
b100 O
b100 X
b100 h
1"
0!
#150
x1
x2
x#
x6
bx &
bx U
bx g
bx 8
bx ;
bx N
bx S
bx :
x<
x'
x7
bx 9
bx >
bx E
bx J
bx $
bx =
bx V
bx 5
bx C
bx L
bx j
x3
x%
x/
bx D
bx I
bx M
bx *
bx O
bx X
bx h
bx +
bx ?
bx i
bx B
bx G
bx A
bx F
bx @
bx H
bx K
bx f
bx e
bx d
bx 4
bx W
bx `
bx l
bx )
bx Q
bx k
bx -
bx Y
bx c
b1000 0
b1000 ]
b1000 b
bx ,
bx _
bx a
b100 .
b100 R
b100 Z
b100 [
b100 ^
1!
#200
0!
#250
bx 0
bx ]
bx b
bx .
bx R
bx Z
bx [
bx ^
1!
#300
0!
#350
1!
#400
0!
#450
1!
